{"version":3,"file":"index.js","mappings":"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","sources":["webpack://backend/external commonjs \"cors\"","webpack://backend/external commonjs \"express\"","webpack://backend/external commonjs \"fs\"","webpack://backend/external commonjs \"mongoose\"","webpack://backend/external commonjs \"multer\"","webpack://backend/external commonjs \"path\"","webpack://backend/webpack/bootstrap","webpack://backend/./index.js"],"sourcesContent":["module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const mongoose = require('mongoose');\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n//MongoDB Connection\r\nconst dbURI = 'mongodb+srv://rudradeysarkar2002:Rudra9595@college-erp-system.2y8uzyb.mongodb.net/College-ERP-System?retryWrites=true&w=majority';\r\nmongoose.connect(dbURI,\r\n    {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true,\r\n    }).then(function () {\r\n        console.log(\"DB Connected\")\r\n    }).catch(function (err) {\r\n        console.log(err)\r\n    })\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\napp.use(express.urlencoded({ extended: false }))\r\n\r\nconst mydb = new mongoose.Schema({\r\n    user: String,\r\n    name: String,\r\n    email: String,\r\n    password: String,\r\n    streamordep: String,\r\n    gender: String\r\n\r\n})\r\nconst collection = mongoose.model('collection', mydb);\r\n\r\n//File Upload For Notice\r\nconst storage1 = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, './upload-notice');\r\n    },\r\n    filename: function (req, file, cb) {\r\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)\r\n        //cb(null, `${Date.now()}-${file.originalname}`);\r\n        cb(null, `${file.originalname}`);\r\n    },\r\n});\r\nconst upload1 = multer({ storage: storage1 })\r\n\r\napp.post(\"/upload-notice\", upload1.single(\"pdfnoticeupload\"), (req, res) => {\r\n    res.json(\"File Uploaded\")\r\n})\r\n\r\n//File Upload For Attendance\r\nconst storage2 = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, './upload-attendance');\r\n    },\r\n    filename: function (req, file, cb) {\r\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)\r\n        //cb(null, `${Date.now()}-${file.originalname}`);\r\n        cb(null, `${file.originalname}`);\r\n    },\r\n});\r\nconst upload2 = multer({ storage: storage2 })\r\n\r\napp.post(\"/upload-attendance\", upload2.single(\"pdfattendanceupload\"), (req, res) => {\r\n    res.json(\"File Uploaded\")\r\n})\r\n\r\n\r\n//File Download For Notice\r\nconst pdfDirectory1 = path.join(__dirname, 'upload-notice');\r\n\r\napp.get('/download-notice', (req, res) => {\r\n    fs.readdir(pdfDirectory1, (err, files) => {\r\n        if (err) {\r\n            res.status(500).json({ error: 'Failed to read directory' });\r\n            return;\r\n        }\r\n        const pdfFiles = files.filter(file => file.endsWith('.pdf'));\r\n        res.json(pdfFiles);\r\n    });\r\n});\r\n\r\napp.get('/download-notice/:filename', (req, res) => {\r\n    const filename = req.params.filename;\r\n    const filePath = path.join(pdfDirectory1, filename);\r\n\r\n    res.download(filePath, err => {\r\n        if (err) {\r\n            res.status(500).json({ error: 'Failed to download file' });\r\n        }\r\n    });\r\n});\r\n\r\n//File Download For Attendance\r\nconst pdfDirectory2 = path.join(__dirname, 'upload-attendance');\r\n\r\napp.get('/download-attendance', (req, res) => {\r\n    fs.readdir(pdfDirectory2, (err, files) => {\r\n        if (err) {\r\n            res.status(500).json({ error: 'Failed to read directory' });\r\n            return;\r\n        }\r\n        const pdfFiles = files.filter(file => file.endsWith('.pdf'));\r\n        res.json(pdfFiles);\r\n    });\r\n});\r\napp.get('/download-attendance/:filename', (req, res) => {\r\n    const filename = req.params.filename;\r\n    const filePath = path.join(pdfDirectory2, filename);\r\n\r\n    res.download(filePath, err => {\r\n        if (err) {\r\n            res.status(500).json({ error: 'Failed to download file' });\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\r\n//login\r\napp.post(\"/login\", async (req, res) => {\r\n    const { user, email, password } = req.body\r\n\r\n    try {\r\n        const check = await collection.find({ user: user, email: email, password: password })\r\n        if (check.length > 0) {\r\n            res.json(\"exist\")\r\n        }\r\n        else {\r\n            res.json(\"notexist\")\r\n        }\r\n\r\n    }\r\n    catch (e) {\r\n        res.json(\"fail\")\r\n    }\r\n\r\n})\r\n\r\napp.get(\"/healthcheck\", async (req, res) => {\r\n    res.json(\"college-erp-system-backend functional\");\r\n})\r\n\r\n//get user login data  for user page\r\napp.post(\"/getdata\", async (req, res) => {\r\n    const { email, password } = req.body\r\n\r\n    try {\r\n\r\n        const check = await collection.find({ email: email, password: password })\r\n\r\n        if (check.length > 0) {\r\n            collection.find({ \"email\": email }).then(data => res.json(data)).catch(err => res.json({ error: err.message }))\r\n        }\r\n        else {\r\n            res.json(\"notexist\")\r\n        }\r\n    }\r\n    catch (e) {\r\n        res.json(\"fail\")\r\n    }\r\n\r\n\r\n})\r\n\r\n\r\n//get method\r\napp.get(\"/getsfdata\", (req, res) => {\r\n    try {\r\n        collection.find().then(data => res.json(data)).catch(err => res.json({ error: err.message }))\r\n    }\r\n    catch (e) {\r\n        res.json(\"fail\")\r\n    }\r\n\r\n\r\n})\r\n\r\n//signup\r\napp.post(\"/signup\", async (req, res) => {\r\n    const { name, email, password, user, streamordep, gender } = req.body\r\n\r\n    const data = {\r\n        user: user,\r\n        name: name,\r\n        email: email,\r\n        password: password,\r\n        streamordep: streamordep,\r\n        gender: gender\r\n    }\r\n\r\n    try {\r\n        const check = await collection.findOne({ email: email })\r\n        if (check === null || check.length <= 0) {\r\n            res.json(\"notexist\")\r\n            await collection.insertMany([data])\r\n        }\r\n        else {\r\n            res.json(\"exist\")\r\n        }\r\n    }\r\n    catch (e) {\r\n        res.json(\"fail\")\r\n    }\r\n\r\n})\r\n\r\n// Define the UPDATE Route\r\napp.put('/update', async (req, res) => {\r\n    const { email, name } = req.body.data;\r\n\r\n    if (!email) {\r\n        return res.json('Email is required');\r\n    }\r\n    else {\r\n        try {\r\n            const result = await collection.findOneAndUpdate(\r\n                { email: email },\r\n                { name: name },\r\n                { new: true } // Update with name and any other fields provided\r\n            );\r\n            if (result) {\r\n                res.json(\"User name updated.\");\r\n            } else {\r\n                res.json(\"User name not updated.\");\r\n            }\r\n        } catch (error) {\r\n            res.json(\"Internal server error \" + error);\r\n        }\r\n    }\r\n});\r\n\r\n//delete the document\r\napp.delete(\"/delete\", async (req, res) => {\r\n    const email = req.body.email;\r\n    if (!email) {\r\n        res.json(\"email not exist\")\r\n    }\r\n    else {\r\n        try {\r\n            const result = await collection.findOneAndDelete({ email });\r\n            if (result) {\r\n                res.json(\"Data Deleted\")\r\n            }\r\n            else {\r\n                res.json(\"Data Not Deleted Due To An Error\")\r\n            }\r\n        }\r\n        catch (e) {\r\n            res.json(e + \" Server Error\")\r\n        }\r\n    }\r\n})\r\n\r\napp.listen(5001, function () {\r\n    console.log(\"Port is active\")\r\n})"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","mongoose","express","cors","multer","fs","path","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","app","use","json","urlencoded","extended","mydb","Schema","user","String","name","email","password","streamordep","gender","collection","model","storage1","diskStorage","destination","req","file","cb","filename","Date","now","Math","round","random","originalname","upload1","storage","post","single","res","storage2","upload2","pdfDirectory1","join","__dirname","get","readdir","files","status","error","pdfFiles","filter","endsWith","params","filePath","download","pdfDirectory2","async","body","find","length","e","data","message","check","findOne","insertMany","put","findOneAndUpdate","new","delete","findOneAndDelete","listen"],"sourceRoot":""}